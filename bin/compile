#!/usr/bin/env bash

set -euo pipefail

BUILDPACK_DIR=$(cd "$(dirname $0)" && pwd)

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

TOOL_DIR=$BUILD_DIR/toolchain
ARCHIVE_DIR=$CACHE_DIR/archives
LIB_DIR=$CACHE_DIR/libs
mkdir -p "$TOOL_DIR" "$ARCHIVE_DIR" "$LIB_DIR"

DMD_VERSION=2.088.0
DMD_ARCHIVE_PATH="http://downloads.dlang.org/releases/2.x/$DMD_VERSION"
DMD_ARCHIVE="dmd.$DMD_VERSION.linux"
DMD_DIR=dmd2
DUB_VERSION=1.11.0
DUB_ARCHIVE=dub-${DUB_VERSION}-linux-x86_64
DUB_ARCHIVE_PATH=https://code.dlang.org/files/
DUB_DIR=dub-${DUB_VERSION}

indent() {
  sed -u 's/^/       /'
}

# download latest archives
cd $ARCHIVE_DIR
if [ ! -f "$DMD_ARCHIVE.tar.xz" ]; then
  echo
  echo "-----> Downloading DMD"
  curl -OL "$DMD_ARCHIVE_PATH/$DMD_ARCHIVE.tar.xz"
fi | indent

if [ ! -f "$DUB_ARCHIVE.tar.gz" ]; then
  echo
  echo "-----> Downloading dub package manager"
  curl -OL "$DUB_ARCHIVE_PATH/$DUB_ARCHIVE.tar.gz"
fi | indent


# initialise toolchain
echo
echo "-----> Initializing toolchain"
cd "$ARCHIVE_DIR"
mkdir "$TOOL_DIR/$DMD_DIR"
tar xf "$DMD_ARCHIVE.tar.xz" -C "$TOOL_DIR"
mkdir -p "$TOOL_DIR/$DUB_DIR/bin"
tar xf "$DUB_ARCHIVE.tar.gz" -C "$TOOL_DIR/$DUB_DIR/bin"
echo
echo '-----> Setting PATH: $PATH'
export PATH=$TOOL_DIR/$DMD_DIR/linux/bin64:$TOOL_DIR/$DUB_DIR/bin:$BUILDPACK_DIR:$PATH
echo $PATH
echo "-----> DMD cmd version:"
dmd --version
echo "-----> DUB package manager cmd version"
dub --version

echo
echo "-----> Building app"
export PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-/app/opt/lib/pkgconfig}
# link the dub cache to the cache folder
mkdir -p "$CACHE_DIR/.dub"
if [ ! -e "$BUILD_DIR/.dub" ]; then
  ln -s "$CACHE_DIR/.dub" "$BUILD_DIR/.dub"
fi
# if dub.json or package.json has contents, run dub build
status=1
if [ ! -s "$BUILD_DIR/dub.json" -a ! -s "$BUILD_DIR/package.json" ]; then
  echo
  echo "!!! dub.json was empty" | indent
  status=1
else
  # pre-build hook
  cd "$BUILD_DIR"
  if [ -f dub-prebuild ]; then
    echo
    echo "Running dub-prebuild…" | indent
    ./dub-prebuild "$BUILD_DIR" "$CACHE_DIR" | indent
    #chmod 755 /app/opt/lib/pkgconfig
  fi

  echo
  echo "Running dub build…" | indent
  if dub build --build=plain; then
    echo
    echo "Build was successful" | indent
    status=0
  else
    echo
    echo "!!! Build failed" | indent
    status=1
  fi
fi

# post-build hook
cd "$BUILD_DIR"
if [ -f dub-postbuild ]; then
  echo
  echo "Running dub-postbuild…" | indent
  ./dub-postbuild "$BUILD_DIR" "$CACHE_DIR" | indent
fi

# clean up any remaining sources
rm -rf "$TOOL_DIR" source src views

exit $status
